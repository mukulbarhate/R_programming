for (i in x) {
if (i%%2==0) {
next
}
print(i)
}
#Create a numeric vector of length 2 and print its max element
v<-c(21,69)
v[1]
#Create a numeric vector of length 2 and print its max element
v<-c(21,69)
v[1]
if (v[1]>v[2]) {
print('Max elemetn',v[1])
}
if (v[1]>v[2]) {
print('Max elemetn',v[1])
}
v[1]>v[2]
#Create a numeric vector of length 2 and print its max element
v<-c(21,69)
#v[1]>v[2]
if (v[1]>v[2]) {
print('Max elemetn',v[1])
}else{
print('Max elemetn',v[2])
}
# Create a numeric vector of length 3 and print its max element
v<-c(21,69,02)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(21,2,69)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(21,2,69)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(21,2,69)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(21,29,69)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(69,3,95)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(69,3,95)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(69,3,95)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}
}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(69,300,95)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}
}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(6955,300,95)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}
}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
# Create a numeric vector of length 3 and print its max element
v<-c(6955,300,959999)
if (v[1]>v[2]) {
if (v[1]>v[3]) {
print(v[1])
}
}else if (v[2]>v[3]) {
print(v[2])
}else{
print(v[3])
}
vowel=c('a','e','i','o','u');vowel
# Create a character vector with 5 consonant alphabet and 3 vowels print all the vowels from this
# vector using control statment
word=c('a','b','h','i')
vowel=c('a','e','i','o','u');vowel
for (i in word) {
if (i %in% vowel) {
print(i)
}
}
#5 consonent and 3 vowels in c and v
word=c('a','b','h','i')
vowel=c('a','e','i','o','u')
c<-c()
v<-c()
for (i in word) {
if (i %in% vowel) { # %in% to find the vector
c<-c(c,i)
}else{
v<-v(v,i)
}
}
#5 consonent and 3 vowels in c and v
word=c('a','b','h','i')
vowel=c('a','e','i','o','u')
c<-c()
v<-c()
for (i in word) {
if (i %in% vowel) { # %in% to find the vector
c<-c(c,i)
}else{
v<-c(v,i)
}
}
c
v
#5 consonent and 3 vowels in c and v
word=c('a','b','h','i','q','z','u')
vowel=c('a','e','i','o','u')
c<-c()
v<-c()
for (i in word) {
if (i %in% vowel) { # %in% to find the vector
c<-c(c,i)
}else{
v<-c(v,i)
}
}
c
v
#5 consonent and 3 vowels in c and v
word=c('a','b','h','i','q','z','u','v')
vowel=c('a','e','i','o','u')
c<-c()
v<-c()
for (i in word) {
if (i %in% vowel) { # %in% to find the vector
c<-c(c,i)
}else{
v<-c(v,i)
}
}
c
v
# Simple function, no inputs!!
hello_world<-function(){
print('Hello world in RR!!!')
}hello_world()
# Simple function, no inputs!!
hello_world<-function(){
print('Hello world in RR!!!')
}
hello_world()
# function with a sigle argument
hello_name<-function(name){
print('Hello',name)
}
hello_name("James")
# function with a sigle argument
hello_name<-function(name){
print(paste('Hello',name))
}
hello_name("James")
# Function to add 2 numbers
add_num<-function(n1,n2){
print(n1+n2)
}add_num(5,6)
# Function to add 2 numbers
add_num<-function(n1,n2){
print(n1+n2)
}
add_num(5,6)
# switch() function similar to switch case in Python
HRA<-function(city){
hra_amt<-switch (toupper(city),
BLR = 5000,
MUM = 6000,
DEL = 4000
)
return(hra_amt)
}
HRA('blr')
# switch() function similar to switch case in Python
HRA<-function(city){
hra_amt<-switch (toupper(city),
BLR = 5000,
MUM = 6000,
DEL = 4000,
8000
)
return(hra_amt)
}
HRA('blr')
HRA('MUM')
HRA('pune')
#create simple calculator in R create a msg to subtract which number 1 or 2
add_num<-function(n1,n2){
print(n1+n2)
}
sub_num<-function(n1,n2){
print(n1-n2)
}
mult_num<-function(n1,n2){
print(n1*n2)
}
div_num<-function(n1,n2){
print(n1/n2)
}
n1<-as.integer(readline("Enter 1 number: "))
n2<-as.integer(readline("Enter 2 number: "))
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2)
)
}
calc('add')
for (i in 1:5) {
print(i,"\n")
}
for (i in 1:5) {
print(paste(i,"\n"))
}
print(paste(i))
for (i in 1:5) {
print(paste(i))
}
for (i in 1:5) {
cat(i,"\n")
}
n1<-as.integer(readline("Enter 1 number: "))
n2<-as.integer(readline("Enter 2 number: "))
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2),
sub = n<-as.integer(readline("Which no to sub from 1 or 2")),
if (n ==1) {
sub_num(n1,n2)
}else{
sub_num(n2,n1)
}
)
}
calc('add')
calc('sub')
5
n1<-as.integer(readline("Enter 1 number: "))
n2<-as.integer(readline("Enter 2 number: "))
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2),
sub = {n<-as.integer(readline("Which no to sub from 1 or 2 "))
if (n ==1) {
sub_num(n1,n2)
}else{
sub_num(n2,n1)
}}
multi = mult_num(n1,n2)
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2),
sub = n<-as.integer(readline("Which no to sub from 1 or 2 ")),
if (n ==1) {
sub_num(n1,n2)
}else{
sub_num(n2,n1)
}
multi = mult_num(n1,n2)
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2),
sub = n<-as.integer(readline("Which no to sub from 1 or 2 "))
if (n ==1) {
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2),
sub = n<-as.integer(readline("Which no to sub from 1 or 2 ")) if (n ==1) {
calc_amt<-switch (op,
add = add_num(n1,n2),
multi = mult_num(n1,n2)
)
n1<-as.integer(readline("Enter 1 number: "))
n2<-as.integer(readline("Enter 2 number: "))
calc<-function(num){
calc_amt<-switch (num,
add = add_num(n1,n2),
multi = mult_num(n1,n2)
)
}
calc('add')
calc('multi')
# R function to find the square of any user given no. If square value is less than 100,then
# increment user value by 1 & find square again. Repeat this step till square exceeds 100
squ<-function(n){
cat(n**2)
}squ(2)
# R function to find the square of any user given no. If square value is less than 100,then
# increment user value by 1 & find square again. Repeat this step till square exceeds 100
squ<-function(n){
cat(n**2)
}
squ(2)
squ<-function(n){
cat(n**2)
}
squ(2)
squ<-function(n){
for (i in 10) {
cat(n**2)
n=n+1
}
}
squ(2)
squ<-function(n){
for (n in 10) {
cat(n**2)
i=1+1
}
}
squ(2)
squ<-function(n){
for (n in 1:10) {
print(n)
}
}
squ(2)
squ<-function(n){
for (n in 1:10) {
cat(n**2)
i=1+1
}
}
squ(2)
squ<-function(n){
for (n in 1:10) {
cat(n**2,"\n")
i=1+1
}
}
squ(2)
squ<-function(n){
for (n in 1:10) {
sq=n**2
cat(sq,"\n")
if (sq>100) {
break
}
i=1+1
}
}
squ(2)
squ<-function(n){
for (n in 1:100) {
sq=n**2
cat(sq,"\n")
if (sq>100) {
break
}
i=1+1
}
}
squ(2)
squ(10)
squ<-function(n){
for (n in 1:100) {
sq=n**2
cat(sq,"\n")
if (sq>100) {
break
}
i=1+1
}
}
squ(10)
squ<-function(n){
repeat{
sq=n**2
cat(sq,"\n")
if (sq>100) {
break
}
i=1+1
}
}
squ(10)
squ<-function(n){
repeat{
sq=n**2
message('The square is ',sq)
#cat(sq,"\n")
if (sq>=100)break
i=i+1
}
return(n)
}
squ(10)
squ<-function(n){
repeat{
sq=n**2
message('The square is ',sq)
#cat(sq,"\n")
if (sq>=100)break
i=i+1
}
return(n)
}
squ(2)
squ<-function(n){
repeat{
sq=n*n
message('The square is ',sq)
#cat(sq,"\n")
if (sq>=100)break
i=i+1
}
return(n)
}
squ(2)
squ<-function(n){
repeat{
sq=n*n
message('The square is ',sq)
#cat(sq,"\n")
if (sq>=100) break
n=n+1
}
return(n)
}
squ(2)
################################## Tidyverse Package #########################3333
install.packages('tidyverse')
library(tidyverse)
View(diamonds)
?diamond
?diamonds
str(diamonds)
names(diamonds)
summary(dimonds)
summary(diamonds)
data('tidyverse')
data()
iris %>% head()
library(magrittr)
iris %>% head() # same as head('iris')
iris %>% head() %>% summary()
#Create three new column in diamonds dataset namely JustOne store 1 in it. Values store something in it
diamonds %>%
mutate(JustOne = 1,
Values = 'something',
Simple = TRUE)
diamonds %>% mutate(JustOne = 1,Values = "something",Simple = TRUE)
q()
