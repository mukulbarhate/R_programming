"Ideal" = "IDEAL"))
diamonds %>%
mutate(cut.new = recode(cut,
"Ideal" = "IDEAL",
"Fair" = "Okay",
"Premium" = "pizza"))
# creating a dataset with 2 variables (Sex , TestScore)
Sex <- factor(c("male", "m", "M", "Female", "Female", "Female"))
TestScore <- c(10, 20, 10, 25, 12, 5)
dataset <- tibble(Sex, TestScore)		# similar to dataframe with limited informatin
str(dataset)
?tibble
dataset %>%
mutate(Sex.new = recode(Sex,
"m" = "Male",
"M" = "Male",
"male" = "Male"))
dataset = as.data.frame(dataset)
diamonds %>%
summarize(avg.price = mean(price))
diamonds %>%
summarize(avg.price = mean(price),     # average price of all diamonds
dbl.price = mean(price) * 2, # calculating double the average price
random.add = 1 + 2,          # a math operation without an existing variable
avg.carat = mean(carat),     # average carat size of all diamonds
stdev.price = sd(price))     # calculating the standard deviation
## Creating identification number to represent 50 individual people
ID <- c(1:50)
?rep
## Creating sex variable (25 males/25 females)
Sex <- rep(c("male", "female"), 25) # rep stands for replicate
## Creating age variable (20-39 year olds)
Age <- c(26, 25, 39, 37, 31, 34, 34, 30, 26, 33,
39, 28, 26, 29, 33, 22, 35, 23, 26, 36,
21, 20, 31, 21, 35, 39, 36, 22, 22, 25,
27, 30, 26, 34, 38, 39, 30, 29, 26, 25,
26, 36, 23, 21, 21, 39, 26, 26, 27, 21)
## Creating a dependent variable called Score
Score <- c(0.010, 0.418, 0.014, 0.090, 0.061, 0.328, 0.656, 0.002, 0.639, 0.173,
0.076, 0.152, 0.467, 0.186, 0.520, 0.493, 0.388, 0.501, 0.800, 0.482,
0.384, 0.046, 0.920, 0.865, 0.625, 0.035, 0.501, 0.851, 0.285, 0.752,
0.686, 0.339, 0.710, 0.665, 0.214, 0.560, 0.287, 0.665, 0.630, 0.567,
0.812, 0.637, 0.772, 0.905, 0.405, 0.363, 0.773, 0.410, 0.535, 0.449)
## Creating a unified dataset that puts together all variables
data <- tibble(ID, Sex, Age, Score)
data1 = as.data.frame(data)
install.packages("magittr")
library(magittr)
#Only display data from diamonds that do not have a cut value of Fair:
diamonds %>% filter(cut != "Fair")
diamonds %>% select(cut, color)
diamonds %>% select(1:5)
# or
diamonds %>% select(1,2,4,5)
#Retain all of the columns except for cut:
diamonds %>% select(-cut)
#Retain all of the columns except for cut and color:
diamonds %>% select(-cut, -color)
#Retain all of the columns except for the first five columns:
diamonds %>% select (-1,-2,-3,-4,-5)
# or
diamonds %>% select(-(1:5))
#Arrange cut by alphabetical order (A to Z):
diamonds %>% arrange(cut)
#Arrange price by numerical order (lowest to highest):
diamonds %>% arrange(price)
#Arrange cut in descending alphabetical order:
diamonds %>% arrange(desc(cut))
#Arrange price in descending numerical order:
diamonds %>% arrange(desc(price))
#Count the number of values for each cut:
diamonds %>% count(cut)
# is the same as
diamonds %>% group_by(cut) %>% count()
diamonds %>% rename(PRICE = price)
diamonds %>% rename(length = x, width = y, depth = z)
var1 = readline("Enter first number:")
var3 = readline("Enter first number:")
var5 = readline("Enter first number:")
{
num1 = as.integer(readline("Enter I number: "))
num2 = as.integer(readline("Enter II number: "))
num3 = as.integer(readline("Enter III number: "))
num4 = as.integer(readline("Enter IV number: "))
}
num4 = as.integer(readline("Enter IV number: "))
x = scan()
y
casefold(y,upper = F)
casefold(y,upper = T)
toupper(y)
tolower(y)
class(x)
var1
var2
class(var1)
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
class(var1)
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
#create a vector by taking age as an input from 5 of your classmates
### Practice Dataset
practice <-
tibble(Subject = rep(c(1,2,3),8),
Date = c("2019-01-02", "2019-01-02", "2019-01-02",
"2019-01-03", "2019-01-03", "2019-01-03",
"2019-01-04", "2019-01-04", "2019-01-04",
"2019-01-05", "2019-01-05", "2019-01-05",
"2019-01-06", "2019-01-06", "2019-01-06",
"2019-01-07", "2019-01-07", "2019-01-07",
"2019-01-08", "2019-01-08", "2019-01-08",
"2019-01-01", "2019-01-01", "2019-01-01"),
DV = c(sample(1:10, 24, replace = T)),
Inject = rep(c("Pos", "Neg", "Neg", "Neg", "Pos", "Pos"), 4))
## Method1
practice %>%
mutate(Session = row_number())
## Method2
practice %>%
group_by(Subject, Inject) %>%
mutate(Session = row_number())
## Method3
practice %>%
group_by(Subject, Inject) %>%
arrange(Date) %>%
mutate(Session = row_number())
View(practice %>%
group_by(Subject, Inject) %>%
arrange(Date) %>%
mutate(Session = row_number()))
View(practice %>%
group_by(Subject, Inject) %>%
arrange(Date) %>%
mutate(Session = row_number()))
plot(v,type='o',col='red', xlab='X-Axis',ylab = 'Y-Axis', main = 'Line Chart')
plot(v,type = 'l')
## ggplot
## rshiny for dashboard
#### Plot ####
#Line Plot
data()
?plot
?iris
v <- c(8,14,2,65,43)
plot(v,type = 'p')
plot(v,type = 'l')
plot(v,type='o',col='red', xlab='X-Axis',ylab = 'Y-Axis', main = 'Line Chart')
?plot
plot(v,type='o',col='red', xlab='X-Axis',ylab = 'Y-Axis', main = 'Line Chart')
par(mfrow=c(1,2))
par(mfrow=c(1,2))
?plot
#if you have to have
par(mfrow=c(1,2))
plot(v,type = 'p')
plot(v,type = 'o')
?plot # plot is 2 dimensional
plot(v,type = 'h')
#if you have to have to much data
par(mfrow=c(1,2,3)) # par is for partition multiple plot at the same time
plot(v,type = 'p')
plot(v,type = 'o')
plot(v,type = 'h')
#if you have to have to much data
par(mfrow=c(1,3)) # par is for partition multiple plot at the same time
plot(v,type = 'p')
plot(v,type = 'o')
plot(v,type = 'h')
bg='black'
plot(v,type = 'h')
bg='black'
bg=black
#if you have to have to much data
par(mfrow=c(1,3)) # par is for partition multiple plot at the same time
plot(v,type = 'p')
plot(v,type = 'o')
plot(v,type = 'h')
par(bg='black')
data=iris
names(data)
View(data)
str(data)
?plot
par(bg='blue')
data=iris
plot(v,type = 'p')
par(bg='white')
plot(v,type = 'h')
par(bg='white')
data=iris
#if you have to have to much data
par(mfrow=c(1,3)) # par is for partition multiple plot at the same time
plot(v,type = 'p')
plot(v,type = 'o')
plot(v,type = 'h')
par(bg='white')
data=iris
names(data)
plot(x,y,type = 'l')
x=c(1:11)
y=c(2:22)
plot(x,y,type = 'l')
x=c(1:11)
y=c(2:12)
plot(x,y,type = 'l')
plot(x,y,type = 'l',col='blue')
x=c(1:11)
y=c(12:22)
plot(x,y,type = 'l',col='blue')
plot(data$Sepal.Length, type = 'o', col='red', main = 'Comparison between Sepal length & Petal Length')
par(mfrow=c(1,2))
plot(data$Sepal.Length, type = 'o', col='red', main = 'Comparison between Sepal length & Petal Length')
par(mfrow=c(1,1))
plot(data$Sepal.Length, type = 'o', col='red', main = 'Comparison between Sepal length & Petal Length')
lines(data$Petal.Length, type = 'o',col='blue') # if you want to plot multiple lines we can use
?plot
plot(data$Sepal.Length, type = 'o', col='red', main = 'Comparison between Sepal length & Petal Length')
?plot
plot(data$Sepal.Length,type = 'o', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,10))
lines(data$Petal.Length, type = 'o',col='blue') # if you want to plot multiple lines we can use
plot(data$Sepal.Length,type = 'o', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,10))
lines(data$Petal.Length,type = 'o',col='blue')
lines(data$Petal.Length,type = 'o',col='blue')
plot(data$Sepal.Length,type = 'o', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,10))
lines(data$Petal.Length,type = 'o',col='blue')
plot(data$Sepal.Length, type = 'o', col='red', main = 'Comparison between Sepal length & Petal Length')
lines(data$Petal.Length, type = 'o',col='blue') # if you want to plot multiple lines we can use
plot(data$Sepal.Length,type = 'o', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,10))
lines(data$Petal.Length,type = 'o',col='blue')
plot(data$Sepal.Length,type = 'o', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,100))
lines(data$Petal.Length,type = 'o',col='blue')
plot(data$Sepal.Length,type = 'o', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,100),ylim=c(0,9))   # xlim is used to limit the data point in range(0,100)
lines(data$Petal.Length,type = 'o',col='blue')
?plot
plot(data$Sepal.Length,type = 's', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,100),ylim=c(0,9))   # xlim is used to limit the data point in range(0,100)
plot(data$Sepal.Length,type = 'S', col='red',main='Comparison between Sepal length & Petal Length',xlim=c(0,100),ylim=c(0,9))   # xlim is used to limit the data point in range(0,100)
lines(data$Petal.Length,type = 'S',col='blue')
# either x or y in line
# scatter plot both 2D we have to give 2 parameters
data1=mtcars
plot(data1$wt, data1$mpg,xlab = 'Weight',ylab='Milage',main = "Weight vs milage")
# either x or y in line
# scatter plot both 2D we have to give 2 parameters
data1=mtcars
pairs(data1)
plot(data1$wt, data1$mpg,xlab = 'Weight',ylab='Milage',main = "Weight vs milage")
plot(data1$wt, data1$mpg,xlab = 'Weight',ylab='Milage',main = "Weight vs milage",type = 'o')
pairs(data1)
?mtcars
abline(lm(mpg~wt,data = data1),col='red') #is like line lm(y~x) manner we are building a relation base d regression function ->also called as trendline
abline(lm(mpg~wt,data = data1),col='red') #is like line lm(y~x) manner we are building a relation base d regression function ->also called as trendline
plot(data1$wt, data1$mpg,xlab = 'Weight',ylab='Milage',main = "Weight vs milage")
abline(lm(mpg~wt,data = data1),col='red') #is like line lm(y~x) manner we are building a relation base d regression function ->also called as trendline
pairs(~wt+mpg+disp+cyl,data = data1)
H=c(5,7,9,11) #display value names.arg which value/name given to your bar
M=c('A','B','C','D')
barplot(H,names.arg = M, col = 'red', border = 'green')
barplot(H,names.arg = M, col = 'skyblue', border = 'green')
barplot(H,names.arg = M, col = 'skyblue', border = 'blue')
barplot(H,names.arg = M, col = 'skyblue', border = 'skyblue')
H=c(5,72,9,11)
barplot(H,names.arg = M, col = 'skyblue', border = 'skyblue')   #display value names.arg which value/name given to your bar
H=c(5,15,9,11)
M=c('A','B','C','D')
barplot(H,names.arg = M, col = 'skyblue', border = 'skyblue')   #display value names.arg which value/name given to your bar
#Plot the bar chart
barplot(H, main = 'Car Distribution' ,xlab='Number of Gears',col = 'skyblue')
#Create the data for the chart
H<-c(1,2,3,4,5)
#Plot the bar chart
barplot(H, main = 'Car Distribution' ,xlab='Number of Gears',col = 'skyblue')
#Plot the bar chart
barplot(H, main = 'Car Distribution' ,xlab='Number of Gears',col = 'skyblue',border = 'skyblue')
#Simple bar plot
counts<-table(mtcars$gear)
par(mfrow=c(1,1))
barplot(mtcars$gear)
mtcars
mtcars$gear
mtcars
mtcars$gear
view(mtcars)
barplot(counts, main='Car Distribution',xlab='Number of Gears',col = 'red')
barplot(counts, main='Car Distribution',xlab='Number of Gears',col = 'skyblue')
barplot(counts, main='Car Distribution',xlab='Number of Gears',col = 'skyblue',border = 'skyblue')
?barplot
#Multiple
counts<-table(mtcars$vs,mtcars$gear)
rownames(counts)
barplot(counts,main='Car Distribution by Gear and VS',
xlab = 'Number of Gears',col = c('skyblue','lightblue'),beside = T)
legend('topright',pch = 16, col = c('skyblue','lightblue'),c('a','b'))  # to explain what parameters represent
legend('topright',pch = 16, col = c('skyblue','lightblue'),c('a','b'),cex = 0.7)
barplot(counts,main='Car Distribution by Gear and VS',
xlab = 'Number of Gears',col = c('skyblue','lightblue'),border = 'white',beside = T)
legend('topright',pch = 16, col = c('skyblue','lightblue'),c('a','b'))  # to explain what parameters represent
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("skyblue","lightblue"), beside = TRUE)
#Stacked
counts <- table(mtcars$vs, mtcars$gear)
#Stacked
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("skyblue","lightblue"),
legend = rownames(counts),beside = F)
###Percentage
p1 <- as.matrix(prop.table(table(mtcars$vs))) * 100
p2 <- as.matrix(prop.table(table(mtcars$gear))) * 100
#### Explain
k1 <- prop.table(table(mtcars$vs))*100
k2 <- prop.table(table(mtcars$gear))* 100
op <- par(mfrow=c(1,2))
barplot(k1, legend=TRUE, names="status", ylab="Percent")
barplot(k2, legend=TRUE, names="Type")
par(mfrow=c(1,2))
barplot(p1, legend=F, names="status", ylab="Percent")
barplot(p2, legend=F, names="Type")
#Simple pie chart
?paste
?round
?pie
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
pie(slices)
#Pie chart with percentage written on it
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
slices<-c(20,12,15,9)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
pie(slices)
#Pie chart with percentage written on it
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
slices<-c(20,12,15,9)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
pie(slices)
#Pie chart with percentage written on it
slices <- c(10, 12, 4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
?hist
View(airquality)
#Grouped data Exclusive Class
#In case of Inclusive Class - Upper Limit is Included
#in the lower limit of next class interval
b_cut1 <- cut(b, 4,right = F) ##exclusive
b <- sample(10:20, 100, replace = T)
#ignore
b_cut <- cut(b, 4)
table(b_cut)
b_cut <- cut(b, 4,right = T) ##inclusive
b_cut <- cut(b, c(10,12,14,16,18,20),right = T) ##inclusive
b_cut <- cut(b, c(10,12,14,16,18,20),include.lowest = T,right = T) ##inclusive
b_cut <- cut(b, c(10,12,14,16,18,20),labels = c("10-12","13-14","15-16","17-18","19-20"),include.lowest = T,right = T) ##inclusive
table(b_cut)
#Grouped data Exclusive Class
#In case of Inclusive Class - Upper Limit is Included
#in the lower limit of next class interval
b_cut1 <- cut(b, 4,right = F) ##exclusive
b_cut1 <- cut(b, c(10,12,14,16,18,20),right = F) ##exclusive
table(b_cut1)
b_cut1 <- cut(b, c(10,12,14,16,18,20),labels = c("10-12","12-14","14-16","16-18","18-20"),right = F) ##exclusive
table(b_cut1)
first <- as.data.frame(table(b_cut1))
##check
table(b)
#b <- as.data.frame(table(b))
?hist
View(airquality)
Temperature <- airquality$Temp
hist(Temperature)
?hist
View(airquality)
#b <- as.data.frame(table(b))
?hist
##check
table(b)
View(airquality)
#Grouped data Exclusive Class
#In case of Inclusive Class - Upper Limit is Included
#in the lower limit of next class interval
b_cut1 <- cut(b, 4,right = F) ##exclusive
b_cut1 <- cut(b, c(10,12,14,16,18,20),right = F) ##exclusive
table(b_cut1)
b_cut1 <- cut(b, c(10,12,14,16,18,20),labels = c("10-12","12-14","14-16","16-18","18-20"),right = F) ##exclusive
table(b_cut1)
first <- as.data.frame(table(b_cut1))
##check
table(b)
#b <- as.data.frame(table(b))
?hist
b_cut <- cut(b, 4,right = T) ##inclusive
b_cut <- cut(b, c(10,12,14,16,18,20),right = T) ##inclusive
b_cut <- cut(b, c(10,12,14,16,18,20),include.lowest = T,right = T) ##inclusive
b_cut <- cut(b, c(10,12,14,16,18,20),labels = c("10-12","13-14","15-16","17-18","19-20"),include.lowest = T,right = T) ##inclusive
table(b_cut)
#Grouped data Exclusive Class
#In case of Inclusive Class - Upper Limit is Included
#in the lower limit of next class interval
b_cut1 <- cut(b, 4,right = F) ##exclusive
b_cut1 <- cut(b, c(10,12,14,16,18,20),right = F) ##exclusive
table(b_cut1)
b_cut1 <- cut(b, c(10,12,14,16,18,20),labels = c("10-12","12-14","14-16","16-18","18-20"),right = F) ##exclusive
table(b_cut1)
first <- as.data.frame(table(b_cut1))
##check
table(b)
#b <- as.data.frame(table(b))
?hist
View(airquality)
Temperature <- airquality$Temp
hist(Temperature)
hist(Temperature)
par(c(1,1))
par(temp,c(1,1))
#histogram with added parameters
hist(temprature,
main = 'Maximum daily temperatures at La Guardia Airport',
xlab = 'Temprature in degree Fahrenheit',
xlim = c(50,100),
col = 'skyblue',labels=T
)
#histogram with added parameters
hist(temprature,
main = 'Maximum daily temperatures at La Guardia Airport',
xlab = 'Temprature in degree Fahrenheit',
xlim = c(50,100),
col = 'skyblue',labels=T
)
#histogram with added parameters
hist(temprature,
main = 'Maximum daily temperatures at La Guardia Airport',
xlab = 'Temprature in degree Fahrenheit',
xlim = c(50,100),
col = 'skyblue',labels=T
)
par(mfrow=c(1,1))
#histogram with added parameters
hist(temprature,
main = 'Maximum daily temperatures at La Guardia Airport',
xlab = 'Temprature in degree Fahrenheit',
xlim = c(50,100),
col = 'skyblue',labels=T
)
#Histogram with different breaks
hist(temprature,breaks = 4,main = "With breaks=4")
hist(temprature,breaks = 20, main = 'With breaks=20')
hist(temprature,
main = "Maximu daily temperatures at La Guardia Airport",
xlab='Temprature in degreee Fahrenheit',
xlim=c(50,100),
col = 'Green',
border = 'red',
breaks=c(55,60,70,75,80,100)
)
