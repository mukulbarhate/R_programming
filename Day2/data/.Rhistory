surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors
books
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
m1
salesreport<-data.frame(Id=101:110,
Product=c("A","B"),
Unitprice=as.integer(runif(10,100,200)),
Qty=as.integer(runif(10,10,20))
)
salesreport
#1.Transpose data frame
transpose.salesreport<-t(salesreport)
View(transpose.salesreport)
head(transpose.salesreport)
#2.Sorting of data frame
salesreport[order(salesreport$Unitprice),]
salesreport[order(salesreport$Unitprice,decreasing = T),]
?order
salesreport[order(salesreport$Product),]
salesreport[order(salesreport$Product,-salesreport$Unitprice),]
subset.ProductA<-subset(salesreport,Product=="A")
subset.ProductA
# Extact the rows for which Product is A and Unitprice > 150
subset.salesreport<-subset(salesreport,Product=="A" & Unitprice>150)
subset.salesreport
# Extract only the first and the fourth column Product is A and Unitprice > 150
subset.salesreport<-subset(salesreport,Product=="A" & Unitprice>150,c(1,3))
subset.salesreport
setA<-subset(salesreport,Product=="A")
setB<-subset(salesreport,Product=="B")
setA
setB
#4.Merging of data frame
salesreport
cbind(setA,setB)
rbind(setA,setB)
aggregate(salesreport$Qty,list(salesreport$Prod),sum,na.rm=T)
?aggregate
list_1<-list(x=c(10,20,30),
y=c("a","b","c"),
z=c(TRUE,FALSE))
list_1
list2<-list(vec=seq(1:10),
mat=matrix(1:9,3,3),
lis=list(a=10,b=20))
list2
# Recursive variable->Variable that can store values of its own type.
is.recursive(list2)
list2[2] # By index
list2$mat # By dollar notation
list2['vec'] # By name
list2$lis[2] #3rd element 2nd value
list2[[3]][2] #3rd element 2nd value
length(list2)
class(list2)
price<-c(10,20,30)
pricelist<-as.list(price)
pricelist
price
newPrice<-unlist(pricelist)
newPrice
price1<-c(10,20,30,40)
dim(price1)<-c(2,2)
price1
#----------Basic data type functions------------#
n1<-10
class(n1) # Returns the datatype of the variable
typeof(n1)
n2<-10.5
class(n2)
typeof(n2)
is.numeric(n1)  #is.numeric() function returns True if given value is numeric else false
is.numeric(n2)
I1<-as.integer(10) #as.integer converts the given value into integer
I1
I2<-as.integer(10.5)
I2
I3<-as.integer("10")
class(I2)
class(I1)
class(I3)
is.numeric(I1) #TRUE
is.integer(I1) #TRUE
x <- 25
x < 10
x > 10
x < 20 & x > 10
(x > 20) & (x>5) & (x == 25)
x > 10 | x < 5
x < 20 | x == 30
(12 == 3)
!(12 == 3)
df <- mtcars
df
df[df['mpg'] >= 30,] # Notice the use of indexing with the comma
subset(df,mpg>=20)
df[(df['mpg'] >= 20) & (df['hp'] > 100),]
# Simple function, no inputs!
hello_world <- function(){
print('hello World in R!')
}
hello_world()
hello_name <- function(name){
print(paste('hello ',name))
}
hello_name('John')
add_num <- function(num1,num2){
print(num1+num2)
}
add_num(30,40)
add_num(c(10,20,30),5)
hello_name <- function(name='Rick'){
print(paste('Hello ',name))
}
hello_name()
hello_name('Sam')
full_name <- function(name='Sachin',title='Tendulkar'){
return(paste(name,' ',title))
}
full_name()
full_name1 <- full_name('Don', 'Bradman')
full_name1
v <- "I'm global variable"
stuff <- "I'm global stuff"
fun <- function(stuff){
print(v)
stuff <- 'Reassign stuff inside the function'
print(stuff)
}
print(v)
print(stuff)
fun(stuff) # Reassignment only happens in scope of function
print(stuff)
amount<-function(x=100)
{
t=x+x*(20/100)
return(t)
}
amount(100)
amount1<-function(amt)
{
if(amt>0) famt=amt+amt*(20/100)
if(amt<=0) famt=amt
return(famt)
}
amount1(100)
args(amount1)
body(amount1)
f1<-function(x)
{
y=10
g1=function(x)
{
y+(x*x)
}
g1(x)
}
f1(10)
g2<-function(x)
{
y+(x*x)
}
f2<-function(x)
{
y=10
g2(x)
}
f2(10)
g2<-function(x,y)
{
y+(x*x)
}
f2<-function(x)
{
y=10
g2(x,y)
}
f2(10)
# Single condition check
hot <- FALSE
temp <- 50
if (temp > 60){
hot <- TRUE
}
hot
# Change the temp value
temp <- 100
if (temp > 60){
hot <- TRUE
}
hot
score <- 63
if (score > 80){
print("It is a good score!")
} else{
print("Its not a good score!")
}
score <- 63
if (score > 80){
print("Good score!")
} else if(score>60 & score<80){
print('Decent score!')
} else if(score<60 & score >33){
print("Average score!")
} else{
print("Poor!")
}
# Example 1
status<-function(marks)
{
result="Not Defined"
if(marks>50) result="PASS"
message("Your result is"," ",result)
}
status(60)
status(30)
status<-function(age)
{
ageGrp="Not Defined"
vote="Not Defined"
if(age>=18)
{
ageGrp="ADULT"
vote="YES"
}
message("Your age group is ",ageGrp)
message("Voting status is ",vote)
}
status(20)
status(15)
status<-function(name)
{
len<-nchar(name)
if(len>5) name=toupper(name)
message("User given name is ",name)
}
status("Stuart")
status("John")
get_bonus<-function(salary,exp)
{
if(exp>5)
{
bonus_per=10
}else
{
bonus_per=5
}
bonus=salary*(bonus_per/100)
return(bonus)
}
get_bonus(25000,6)
get_bonus(25000,3)
get_Group<-function(age)
{
if(age>0)
{
if(age<18)
{
ageGrp="KIDS"
}else if(age<60)
{
ageGrp="ADULT"
}else
{
ageGrp="SENIOR"
}
}else
{
ageGrp="Not Defined"
message("Wrong Age")
}
message("your age group is ",ageGrp)
}
get_Group(10)
get_Group(40)
get_Group(65)
get_Group(-10)
# Example to return hra amount based on cities
HRA<-function(city)
{
hra_amt<-switch(toupper(city),
BLR=7500,
MUM=1000,
DEL=8000,
CHN=7500,
5000
)
return(hra_amt)
}
HRA("BLR")
HRA("PUNE")
HRA("blr")
HRA("AB")
salary_range<-function(band)
{
range<-switch(band,
L1="10000-15000",
L2="15000-25000",
L3="25000-40000"
)
return(range)
}
salary_range("L1")
salary_range("B1")
time<-15
repeat
{
message("Hello, Welcome to R tutorial for beginner!")
if(time>=20) break
time=time+1
}
sqr<-function(n)
{
repeat
{
square=n*n
message("The square is ",square)
if(square>=100) break
n=n+1
}
return(n)
}
sqr(0)
?message
x <- 0
while(x < 10){
cat('x is currently: ',x)
print(' x is still less than 10, adding 1 to x')
# add one to x
x <- x+1
if(x==10){
print("x is equal to 10! Terminating loop")
}
}
req_years<-function(amount=550)
{
famt=0;month=0
while(famt<=8000)
{
month=month+1
famt=famt+amount
message("Month=",month,"final_amount=",famt)
}
year=month/12
return(year)
}
req_years()
req_years(750)
x <- 0
while(x < 5){
cat('x is currently: ',x)
print(' x is still less than 5, adding 1 to x')
# add one to x
x <- x+1
if(x==5){
print("x is equal to 5!")
break
print("I will also print, woohoo!")
}
}
vec <- c(1,2,3,4,5)
for (temp_var in vec){
print(temp_var)
}
# Another process
for (i in 1:length(vec)){
print(vec[i])
}
li <- list(1,2,3,4,5)
for (temp_var in li){
print(temp_var)
}
for (i in 1:length(li)){
print(li[[i]]) # Remember to use double brackets!
}
mat <- matrix(1:25,nrow=5)
mat
for (num in mat){
print(num)
}
for(i in 1:25)
{
sq=i*i
sqroot=sqrt(i)
message("i=",i,"sq=",sq,"sqroot=",sqroot)
}
get_finalbal<-function(amt,year,rate)
{
for(i in 1:year)
{
interest=round(amt*rate/100,2)
finalamt=amt+interest
message("Year=",i,"amt=",amt,"Interest=",interest,"final amt=",finalamt)
amt=finalamt
}
return(finalamt)
}
get_finalbal(5000,5,8)
get_finalbal(10000,10,5)
Type<-c("s","m","l","s","l","m")
Type[3]>Type[4]
Type[1]>Type[2]
Type[2]<Type[3]
Type.factor<-factor(TRUE)
#default Nominal factor
Type.factor
Type.factor2<-factor(Type,ordered=T)
#Factor created in ordinal
Type.factor2
Type.factor3<-factor(Type,ordered=T,level=c("s","m","l"))
#Ordered factor with user given order
Type.factor3
Type.factor4<-factor(Type,ordered=T,level=c("s","m","l"),
labels=c("small","medium","large"))
Type.factor4
Type.factor4[1]>Type.factor4[2]
Type<-c("Small","Tall","Tallest","Medium","Small",
"Medium","Tallest","Tall","Small","Small")
Type
?factor
# Create a vector as input.
data <- c("East","West","East","North","North","East","West","West","West","East","North")
print(data)
print(is.factor(data))
# Apply the factor function.
factor_data <- factor(data)
print(factor_data)
class(factor_data)
print(is.factor(factor_data))
#Factors as Data_Frame
# Create the vectors for data frame.
height <- c(132,151,162,139,166,147,122)
weight <- c(48,49,66,53,67,52,40)
gender <- c("male","male","female","female","male","female","male")
?as.factor
# Create the data frame.
input_data <- data.frame(height,weight,gender)
print(input_data)
str(input_data)
# Test if the gender column is a factor.
print(is.factor(input_data$gender))
input_data$gender = as.factor(gender)
as.factor(gender)
#changing the labels
input_data$gender = as.factor(input_data$gender,levels = c("male","female"),labels = c("male","female"))
input_data$gender = as.factor(input_data$gender,levels("male","female"))
input_data$gender = as.factor(input_data$gender,levels())
?as.factor
# Print the gender column so see the levels.
print(input_data$gender)
class(input_data$gender)
#Changing the order of levels
data <- c("East","West","East","North","North","East","West",
"West","West","East","North")
# Create the factors
factor_data <- factor(data)
print(factor_data)
# Apply the factor function with required order of the level.
new_order_data <- factor(factor_data,levels = c("East","West","North"))
print(new_order_data)
?as.factor
#Generating Factor Levels
#We can generate factor levels by using the gl() function.
#It takes two integers as input which indicates how many levels
#and how many times each level.
?gl
v <- gl(3, 4, labels = c("Tampa", "Seattle","Boston"))
print(v)
v1 <- gl(3, 4, labels = c("Thane", "Borivali"))
print(v1)
setwd("D:/C Drive/Desktop/SURAJ SINGH/Teaching/SM VITA/2022/OCT - SEPT/Lecture Notes/Data/")
# Get working directory
getwd()
# read.table() function to import .txt files
Titanic = read.table("Titanic_space_separated.txt", header=TRUE) # No "sep" term, as space is the default separator
Titanic = read.table("D:/C Drive/Desktop/SURAJ SINGH/Teaching/C-DAC/Lecture Notes/Data/Titanic_space_separated.txt",header=TRUE)
?read.table
class(Titanic)
# See all data
View(Titanic)
head(Titanic)
## See first 10 rows
head(Titanic,10)
tail(Titanic)
# See last 5 rows
tail(Titanic,5)
str(Titanic)
# Change column's type to character
Titanic$Sex = as.factor(Titanic$Sex) # Sex column is overwritten by "character" version of Sex column
summary(Titanic)
# Change column's type to factor
Titanic$Sex = as.factor(Titanic$Sex)
# read.table() function to import .txt files
Orange = read.table("Orange_comma_separated.txt", header = TRUE, sep = ",") # sep= "," for comma separated files
class(Orange)
View(Orange)
summary(Orange)
