print("Hello World")
q()
192+250
955-380
20*100
50/5
5^4
2^4
18%%7
18%7
(500*2)+(80/2)
200*(12/4)
#Assigning variables
selling <- 500
cost <- 20
profit <- selling-cost
profit
#Datatype in R
num <- 3.7
class(num)
typeof(num)
i <- 10
t <- TRUE
f = FALSE
typeof(t)
ch <- "HELLO"
class(ch)
typeof(ch)
c <- 5+9i
class(c)
length(ch)
# using print function
print("Hey")
y<-69
print(y)
x <- mtcars
print(x)
vec6=c("A",1)
vec6
typeof(vec6)
vec7<-c(1:20);vec7
vec8<-seq(1,20);vec8
vec9<-1:20;vec9
# This will assign the tempreature to the names
temprature <- c(72,71,68,73,69,75,71)
temprature
names(temprature) <- c ('Mon','Tue','Wed','Thu','Fri','Sat','Sun')
temprature
price<-seq(100,200,300)
names(price)<-paste0('p',1:7);price
names(price)<-paste0('p',1:);price
price<-seq(100,220,20)
names(price)<-paste0('p',1:7);price
?paste0
names(price)<-paste('p',1:7);price
names(price)<-paste0('p',1:7);price
v1<-c(1,2,3);v1
v2<-c(5,6,7);v2
sum(v1)
# vector slicing and indexing
price1<-seq(550,670,20)
names(price1)<-paste0("p",1:7)
names(price1)<-paste0("p",1:7);price1
price1[3]
price1[3:4]
price1[c(1,4)]
price1[c(1,4)]
price1[c(1,4)]
price1[c(2,6)]
price1[c("p3")]
price1[c("p3","p4","p7")]
price1["p3"]
price1[-2]
price1[c(-2,-5)]
price1[price1>600]
filter <- price1>600
price1[filter]
order_detail <-c (10,20,30,NA,50,60)
order_detail
names(order_detail) <-c ("Mon","Tue","Wed","Thu","Fri","Sat")
order_detail
order_detail + 5 #Any operation peformed on vector, will be applied to all the values of vector
new_order <- c(5,10)
order_detail + new_order
new_order <- c(5,10)
order_detail + new_order
update_order <- order_detail+new_order
update_order
new_order <- c(5,10)
new_order <- c(5,10);new_order
order_detail + new_order
order_detail <-c (10,20,30,NA,50,60)
order_detail
names(order_detail) <-c ("Mon","Tue","Wed","Thu","Fri","Sat")
order_detail
order_detail + 5 #Any operation peformed on vector, will be applied to all the values of vector
new_order <- c(5,10)
order_detail + new_order
new_order <- c(5,10)
order_detail + new_order
update_order <- order_detail+new_order
update_order
order_detail <-c (10,20,30,NA,50,60)
order_detail
names(order_detail) <-c ("Mon","Tue","Wed","Thu","Fri","Sat")
order_detail
order_detail + 5 #Any operation peformed on vector, will be applied to all the values of vector
new_order <- c(5,10)
order_detail + new_order
update_order <- order_detail+new_order
update_order
firsttwo<-order_detail[1:2]
firsttwo
l<-length(order_detail)
l
v1<-order_detail[(l-1):l]
v1
v1<-order_detail[(l-1):l]
v1
v2<-order_detail[(l-1):2]
v2
v3<-order_detail[l:1]
v3
v4<-order_detail[(l-2):l]
v
v4
#Extract all the values below 30
order_detail<30
order_detail[order_detail<30]
#To omit NA vaue from the vector
na.omit(order_detail[order_detail<30])
(order_detail %% 3)==0
order_detail[(order_detail %% 3)==0]
na.omit(order_detail[(order_detail %% 3)==0])
sum(order_detail) #Returns NA because there is an NA value in the order detail vector
# Use na.rm to remove the NA value
sum(order_detail,na.rm=T)
mean(order_detail,na.rm=T)
max(order_detail,na.rm=T)
min(order_detail,na.rm=T)
sd(order_detail,na.rm=T)
sqrt(order_detail) # returns the square root
#Extract all the values below 30
order_detail<30
#To omit NA vaue from the vector
na.omit(order_detail[order_detail<30])
#To omit NA vaue from the vector
na.omit(order_detail[order_detail<30])
#Extract all the values below 30
order_detail<30
order_detail[order_detail<30]
#To omit NA vaue from the vector
na.omit(order_detail[order_detail<30])
(order_detail %% 3)==0
order_detail[(order_detail %% 3)==0]
na.omit(order_detail[(order_detail %% 3)==0])
sum(order_detail) #Returns NA because there is an NA value in the order detail vector
# Use na.rm to remove the NA value
sum(order_detail,na.rm=T)
# Use na.rm to remove the NA value
sum(order_detail,na.rm=T)
mean(order_detail,na.rm=T)
max(order_detail,na.rm=T)
min(order_detail,na.rm=T)
sd(order_detail,na.rm=T)
sqrt(order_detail) # returns the square root
#### Operators ####
abs(-5)
sqrt(625)
x_1 = c(10,2,3,4)
y_1 = c(50,6,7,8)
x_1+y_1
x_1-y_1
x_1*y_1
x_1/y_1
y_1%/%x_1 # integer division
y_1%%x_1  # Modulus(Remainder from Division)
y_1^x_1# expeonent
# Logical Operators
# Zero is considered as FALSE and non-zero as TRUE
# operators & and | perform element-wise operation
x<- c(TRUE,FALSE,0,8)
y<-c(TRUE, FALSE,FALSE,TRUE)
x&y
x | y
!x
letters
LETTERS
v <- 20:30
v
matrix(v)
mat1 <- matrix(0,3,3) # save 0 of 3X3 matrix
mat1
mat1 <- matrix(3,3,3) # save 0 of 3X3 matrix
mat1
det(mat1)
mat2 <- matrix(1:9,3,3)
mat2
?det()
mat3 <- matrix(1:9,nrow=3, byrow=T)
mat3
mat3 <- matrix(1:9,nrow=2, byrow=T)
mat3
mat3 <- matrix(1:9,nrow=4, byrow=T)
mat3
mat3 <- matrix(1:9,nrow=3, byrow=T)
mat3
mat4 <- matrix(1:9,3,3, byrow=T)
mat4
# create a vector store 9 characters in it and convert that vector in matrix
ch=c(letters[1:9])
# create a vector store 9 characters in it and convert that vector in matrix
ch=c(letters[1:9])
c=matrix(ch,3,3,byrow = T)
c
# Creating matrix from vectors MERGE
stock1<-c(450,451,452,445,468)
stock2=c(230,231,232,236,228)
stocks<-c(stock1,stock2)
stocks
stock.matrix<- matrix(stocks,byrow = T, nrow = 2)
stock.matrix
# Naming a matrix using colnames() and rownames()
days<- c ('Mon','Tue','Wed','Thu','Fri')
# Naming a matrix using colnames() and rownames()
days<- c ('Mon','Tue','Wed','Thu','Fri')
st.names <- c('stock1','stock2')
colnames(stock.matrix) <- days
rownames(stock.matrix) <- st.names
stock.matrix
m <- matrix(1:12,4,3,byrow = T);m
length(m)
mode(m)
l<-m>6
l<-m>6;l
l<-c(m>6);l
l<-m>6;l
print(l==TRUE)
l<-m[m>6];l
l=m[m];l
l=m;l
l=m[m>2];l
l=m[m>6];l
m <- matrix(1:12,4,3,byrow = T);m
l=m[1];l
l=m[5];l
l=m[1,2];l
l=m[c(1),];l
l=m[c(1:3),];l
# c is used to combine or concatenate values it can also print what is written in the matrix
l=m[c(1:3),c(3,2,1)];l
# c is used to combine or concatenate values it can also print what is written in the matrix
l=m[,c(3,2,1)];l
m <- matrix(1:12,4,3,byrow = T);m
# c is used to combine or concatenate values it can also print what is written in the matrix
l=m[,c(3,2,1)];l
?rbind
l=rbind(5,1:3);l
l=rbind(1:3);l
l=matrix.rbind(1:3);l
l=matrix(rbind(1:3));l
l=m(rbind(1:3));l
m <- matrix(1:12,4,3,byrow = T);m
l=m(rbind(1:3));l
l=m[rbind(1:3)];l
l=rbind(m,1:3);l
l=rbind(m,13:15);l
v=m[,1:2]=NA;v
v=m[,1:2]=NA;m
z=m[]=0;m
v=m[];v
v=c(m);
v=c(m);v
View(mat4)
v<-seq(from=21,by=2,to.length=10);v
v<-seq(from=21,by=2,length.out=10);v
###################3
price<-seq(100,220,20)
###################3
price<-seq(100,220,20);price
names(price)<-paste0("p",1:7);price
####################### FACTORIAL- PERMUTATION & COMBINATION ##########################
factorial(3)
n<-5
r<-4
perm<-factorial(n)/factorial(n-r)
perm<-factorial(n)/factorial(n-r);perm
permComb<- function(n, r){
perm<-factorial(n)/factorial(n-r);perm
combi<-factorial(n)/(factorial(r)*factorial(n-r));combi
}
permComb(5,4)
?message
?sprintf
permComb<- function(n, r){
perm<-factorial(n)/factorial(n-r);perm
print(paste('Perm',perm))
combi<-factorial(n)/(factorial(r)*factorial(n-r));combi
sprintf("combinat %i",combi)
}
permComb(5,4)
x<-c(30,40,50,65,70,75)
y<-c(70,65,60,55,50,40)
z<-c(x,y)
z<-c(x,y);z
names(x)<-c(70,65,60,55,50,40)
names(x)<-c(70,65,60,55,50,40);x
x<-c(30,40,50,65,70,75)
y<-c(70,65,60,55,50,40);x
plot(x,y)
abline(lm(y~x))
n<-length(ms);n
ms<-c(53,59,72,43,93,35,55,70)
me<-c(35,49,63,36,75,28,38,76)
n<-length(ms);n
sqrt(9)
ms<-c(53,59,72,43,93,35,55,70)
me<-c(35,49,63,36,75,28,38,76)
sqrt(9)
n<-length(ms);n
r<-((n*sum(x*y))-sum(x)*sum(y)/sqrt(n*sum(x^2)-(sum(x)^2))*srt(n*sum(y^2)-(sum(y^2))))
r
ms<-c(53,59,72,43,93,35,55,70)
me<-c(35,49,63,36,75,28,38,76)
sqrt(9)
n<-length(ms);n
r<-((n*sum(x*y))-sum(x)*sum(y)/sqrt(n*sum(x^2)-(sum(x)^2))*sqrt(n*sum(y^2)-(sum(y^2))))
r
cor(ms,me)
cor(x,y)
r=(n*sum(x*y))-(sum(x)*sum(y))/(sqrt((n*sum(x^2))-(sum(x))^2))*((n*sum(x^2))-(sum(x))^2)
r
r=(n*sum(x*y))-(sum(x)*sum(y))/(sqrt((n*sum(x*x))-(sum(x))^2))*((n*sum(y*y))-(sum(y))^2)
r
x<-c(53,59,72,43,93,35,55,70)
y<-c(35,49,63,36,75,28,38,76)
sqrt(9)
n<-length(ms);n
r<-((n*sum(x*y))-sum(x)*sum(y)/sqrt(n*sum(x^2)-(sum(x)^2))*sqrt(n*sum(y^2)-(sum(y^2))))
r=(n*sum(x*y))-(sum(x)*sum(y))/(sqrt((n*sum(x*x))-(sum(x))^2))*((n*sum(y*y))-(sum(y))^2)
r
cor(ms,me)
r=(n*sum(x*y))-sum(x)*sum(y)/sqrt(n*sum(x*x)-sum(x)^2)*sqrt(n*sum(y*y)-sum(y)^2)
r
(n*sum(x*y)-sum(x)*sum(y))/(sqrt(n*sum(x*x)-(sum(x)^2)))*sqrt(n*sum(y*y)-(sum(x)^2)))
r
r=(n*sum(x*y)-sum(x)*sum(y))/(sqrt(n*sum(x*x)-(sum(x)^2)))*sqrt(n*sum(y*y)-(sum(x)^2)))
r
cor(ms,me)
?cor
getwd()
setwd('D:/PG-DBDA CDAC/R/practice')
getwd()
x<-c(1,2,3,4,5,6,7,9,8)
y<-c(1,5,6,7,1,7,8,4,2)
plot(x,y)
abline(lm(y~x))
data=mtcars
?lm
lm(wt~mp.data=data1)
lm(wt~mp.data=data)
data1=mtcars
lm(wt~mp.data=data)
lm(wt~mpg.data=data)
lm(wt~mpg,data=data)
abline(lm(y~x),col='red') #here abline will give a regression line to a scatterplot which is
lm(wt~mpg,data=data)
plot(lm(wt~mpg,data=data),col="red")
plot(lm(wt~mpg,data=data),col="red")
